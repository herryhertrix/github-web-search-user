import { User } from '@/components/model/basic';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface SearchState {
  value: string;
  users: User[];
  page: number;
  totalPage: number;
  totalUsers: number;
  status: 'idle' | 'loading' | 'failed';
  notFound: { status: boolean, value: string }
}

const initialState: SearchState = {
  value: "",
  users: [],
  page: 1,
  totalPage: 0,
  totalUsers: 0,
  status: 'idle',
  notFound: { status: true, value: "" }
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchAsync = createAsyncThunk(
  'counter/fetchCount',
  async (request: { input: string, page: number }) => {
    const response = await fetch('https://api.github.com/search/users?q=' + request.input + '&per_page=12&page=' + request.page, {
      headers: {
        'Accept': 'application/vnd.github.v3.text-match+json'
      }
    }).then((response: any) => response.json(
    )).then((results: any) => {
      return results
    })
    // const response = await fetch(amount);
    // The value we return becomes the `fulfilled` action payload
    return response
  }
);

export const generateAsync = createAsyncThunk(
  'counter/fetchCount',
  async (request: User) => {
    const response = await fetch(request.url, {
      headers: {
        'Accept': 'application/vnd.github.v3.text-match+json'
      }
    }).then(response => response.json(
    )).then(result => {
      return result

    })
    // const response = await fetch(amount);
    // The value we return becomes the `fulfilled` action payload
    return response
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    isFavorite: (state, action) => {
      const findUser = state.users.findIndex(function (user: User) {
        return user.id === action.payload.id
      })
      if (findUser != -1) {
        const tempUser: User = state.users[findUser]
        tempUser.isFavorite = !tempUser.isFavorite
      }
    },
    searching: (state, action) => {
      state.value = action.payload
    },
    goPage: (state, action) => {
      state.page = action.payload
    },
    clear: (state) => {
      state.value = ""
    },
    updateUser: (state, action) => {
      // state.value -= 1;
      const tempUser: User = state.users[action.payload.index]
      const findFavorite = action.payload.favorite.findIndex(function (user: User) {
        return user.id === action.payload.user.id
      })
      tempUser.followers = action.payload.user.followers
      tempUser.following = action.payload.user.following
      tempUser.isFavorite = findFavorite == -1 ? false : true;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchAsync.fulfilled, (state, action) => {
        if (action.payload.items == undefined) {
          return
        }
        if (action.payload.items.length != 0) {
          state.status = 'idle';
          state.users = action.payload.items
          state.totalUsers = action.payload.total_count
          state.totalPage = Math.ceil(action.payload.total_count / 12)
        } else {
          state.notFound.status = false
          state.notFound.value = state.value
        }
      })
      .addCase(searchAsync.rejected, (state) => {
        state.status = 'failed';
      })
  },
});

export const { goPage, clear, isFavorite, searching, updateUser, incrementByAmount } = searchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;
export const getSearch = (state: RootState) => state.search;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
    (dispatch, getState) => {
      const currentValue = selectCount(getState());
      if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
      }
    };

export default searchSlice.reducer;
